/* static/app.js - Smart Petanque Judge (GitHub Pages friendly) */
/* ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î static (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå) ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏µ API ‡∏à‡∏£‡∏¥‡∏á */
/* eslint-disable no-console */
(function () {
  'use strict';

  // ---------- DOM helpers ----------
  const $ = (id) => document.getElementById(id);

  // ‡πÄ‡∏î‡∏¥‡∏°
  const liveImage       = $('liveImage');   // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô <img> + /video_feed
  const canvas          = $('canvas');
  const ctx             = canvas?.getContext('2d');
  const teamAScoreElem  = $('teamAScore');
  const teamBScoreElem  = $('teamBScore');
  const scoreDisplay    = $('scoreDisplay');
  const statusEl        = $('status');

  const uploadBtn       = $('uploadBtn');
  const fileInput       = $('imageInput');
  const resetBtn        = $('resetBtn');
  const filePreview     = $('filePreview');
  const competitionTypeSelect = $('competitionType');
  const matchNameInput  = $('matchNameInput');
  const saveMatchBtn    = $('saveMatchBtn');
  const saveLiveBtn     = $('saveLiveBtn');

  // ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HTML ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏ß‡πâ)
  const liveVideo   = $('liveVideo');     // <video> ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö getUserMedia
  const startBtn    = $('startCamBtn');
  const toggleBtn   = $('toggleCamBtn');
  const cameraSel   = $('cameraSelect');
  const torchBtn    = $('torchBtn');

  // ---------- Env ----------
  const isStatic = location.hostname.endsWith('github.io') || location.protocol === 'file:';
  const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);

  // ---------- State ----------
  let stream = null;
  let currentDeviceId = null;
  let useBackCamera = true; // ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
  let torchOn = false;

  // ---------- UI utils ----------
  function setStatus(msg, isError = false) {
    if (!statusEl) return;
    statusEl.textContent = msg || '';
    statusEl.style.color = isError ? '#b00020' : '#007f7f';
  }

  function updateScores(scoreA, scoreB) {
    if (teamAScoreElem) teamAScoreElem.textContent = scoreA;
    if (teamBScoreElem) teamBScoreElem.textContent = scoreB;

    const maxScore = Math.max(scoreA, scoreB, 10);
    const pA = $('progressA');
    const pB = $('progressB');
    if (pA) pA.style.width = (scoreA / maxScore) * 100 + "%";
    if (pB) pB.style.width = (scoreB / maxScore) * 100 + "%";

    if (!scoreDisplay) return;
    if (scoreA > scoreB) {
      scoreDisplay.textContent = "üéØ ‡∏ó‡∏µ‡∏° A (‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡∏ï‡∏≠‡∏á‡∏•‡∏≤‡∏¢) ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ!";
    } else if (scoreB > scoreA) {
      scoreDisplay.textContent = "üéØ ‡∏ó‡∏µ‡∏° B (‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡∏ï‡∏≠‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤) ‡∏ä‡∏ô‡∏∞‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ!";
    } else {
      scoreDisplay.textContent = "‡πÄ‡∏™‡∏°‡∏≠‡∏Å‡∏±‡∏ô!";
    }
  }

  function ensureCanvasFromVideo() {
    if (!liveVideo || !canvas) return;
    const vw = liveVideo.videoWidth || 1280;
    const vh = liveVideo.videoHeight || 720;
    if (canvas.width !== vw || canvas.height !== vh) {
      canvas.width = vw; canvas.height = vh;
    }
  }

  function stopStream() {
    if (stream) {
      stream.getTracks().forEach(t => t.stop());
      stream = null;
    }
    if (liveVideo) liveVideo.srcObject = null;
  }

  // ---------- Drawing ----------
  function drawDetections(detections, jack) {
    if (!canvas || !ctx) return;

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ liveVideo ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠
    if (liveVideo && stream) {
      ensureCanvasFromVideo();
      ctx.drawImage(liveVideo, 0, 0, canvas.width, canvas.height);
    }
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ liveImage (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
    else if (liveImage && liveImage.width && liveImage.height) {
      canvas.width  = liveImage.width;
      canvas.height = liveImage.height;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(liveImage, 0, 0, canvas.width, canvas.height);
    }

    if (!jack || !jack.x) return;

    const REAL_JACK_DIAMETER_CM = 3.0;
    const REAL_PETANQUE_DIAMETER_CM = 7.0;
    const cmPerPixelList = [];

    const jackDiameterPx = jack.r * 2;
    if (jackDiameterPx > 0) cmPerPixelList.push(REAL_JACK_DIAMETER_CM / jackDiameterPx);

    (detections || []).forEach(d => {
      if (d.r && (d.label === "plain" || d.label === "patterned")) {
        const ballDiameterPx = d.r * 2;
        if (ballDiameterPx > 0) cmPerPixelList.push(REAL_PETANQUE_DIAMETER_CM / ballDiameterPx);
      }
    });

    const cmPerPixel = cmPerPixelList.length > 0
      ? cmPerPixelList.reduce((a,b)=>a+b,0) / cmPerPixelList.length
      : 0.1;

    // jack
    ctx.beginPath();
    ctx.strokeStyle = "red";
    ctx.lineWidth = 4;
    ctx.arc(jack.x, jack.y, jack.r, 0, Math.PI*2);
    ctx.stroke();

    ctx.font = "18px Kanit, sans-serif";
    ctx.fillStyle = "red";
    ctx.fillText("Jack", jack.x - 20, jack.y - jack.r - 10);

    // balls
    (detections || []).forEach(d => {
      ctx.beginPath();
      ctx.strokeStyle = d.label === "patterned" ? "blue" : "green";
      ctx.fillStyle   = d.label === "patterned" ? "rgba(0,0,255,0.3)" : "rgba(0,128,0,0.3)";
      ctx.lineWidth = 3;
      ctx.arc(d.x, d.y, d.r, 0, Math.PI*2);
      ctx.fill();
      ctx.stroke();

      ctx.font = "16px Kanit, sans-serif";
      ctx.fillStyle = d.label === "patterned" ? "blue" : "green";
      ctx.fillText(`${d.label}`, d.x - d.r, d.y - d.r - 5);

      const dx = d.x - jack.x;
      const dy = d.y - jack.y;
      const distPx = Math.hypot(dx, dy);
      const distCm = distPx * cmPerPixel;

      ctx.fillStyle = "black";
      ctx.fillText(`${distCm.toFixed(1)} cm`, d.x + d.r + 5, d.y + 16);
    });
  }

  function drawVideoFrameToCanvas() {
    if (!liveVideo || !canvas || !ctx) return;
    ensureCanvasFromVideo();
    ctx.drawImage(liveVideo, 0, 0, canvas.width, canvas.height);

    // ‡πÄ‡∏õ‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏á (‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏á‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡∏ï‡∏≠‡∏á)
    ctx.strokeStyle = 'rgba(0,180,216,0.9)';
    ctx.lineWidth = 3;
    const cx = canvas.width/2, cy = canvas.height/2, r = Math.min(canvas.width, canvas.height)*0.12;
    ctx.beginPath(); ctx.arc(cx, cy, r, 0, Math.PI*2); ctx.stroke();
  }

  // ---------- Upload & Preview ----------
  function previewFiles(selectedFiles) {
    if (!filePreview) return;
    filePreview.innerHTML = "";
    Array.from(selectedFiles).forEach((file) => {
      if (!file.type.startsWith("image/")) return;
      const img = document.createElement("img");
      img.src = URL.createObjectURL(file);
      img.onload = () => URL.revokeObjectURL(img.src);
      img.style.maxWidth = "150px";
      img.style.marginRight = "10px";
      img.style.borderRadius = "8px";
      filePreview.appendChild(img);
    });
  }

  async function uploadAndDetect() {
    if (!fileInput || fileInput.files.length === 0) {
      alert("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
      return;
    }

    const matchName = (matchNameInput?.value || '').trim();
    if (!matchName) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
      return;
    }

    const file = fileInput.files[0];

    // ‡πÇ‡∏´‡∏°‡∏î static: ‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å -> ‡πÅ‡∏Ñ‡πà‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß + ‡∏ß‡∏≤‡∏î‡∏•‡∏á‡πÅ‡∏Ñ‡∏ô‡∏ß‡∏≤‡∏™
    if (isStatic) {
      setStatus("‡πÇ‡∏´‡∏°‡∏î Static: ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏Ñ‡∏ô‡∏ß‡∏≤‡∏™ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå)");
      const img = new Image();
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.clearRect(0,0,canvas.width,canvas.height);
        ctx.drawImage(img, 0, 0);
        // TODO: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ú‡∏π‡∏Å TF.js/ONNX Runtime Web ‡∏°‡∏≤‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
      };
      img.src = URL.createObjectURL(file);
      return;
    }

    // ‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /api/detect ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
    const formData = new FormData();
    formData.append("image", file);
    formData.append("competition_type", competitionTypeSelect?.value || '');
    formData.append("match_name", matchName);

    setStatus("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...");
    try {
      const res = await fetch("/api/detect", { method: "POST", body: formData });
      const data = await res.json();

      if (data.error) {
        alert("Error: " + data.error);
        setStatus("‚ùå " + data.error, true);
        return;
      }

      const img = new Image();
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.clearRect(0,0,canvas.width,canvas.height);
        ctx.drawImage(img, 0, 0);
        drawDetections(data.detections, data.jack);
        updateScores(data.score_plain, data.score_patterned);
        setStatus("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
      };
      img.src = URL.createObjectURL(file);
    } catch (error) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message);
      setStatus("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message, true);
    }
  }

  // ---------- Live (server) ----------
  function loadLiveStream() {
    if (!liveImage) return;
    // ‡πÄ‡∏î‡∏¥‡∏°: ‡∏î‡∏∂‡∏á /video_feed ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô <img> (‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏ô GitHub Pages)
    liveImage.src = "/video_feed?" + new Date().getTime();
  }

  function refreshLiveStream() {
    if (isStatic) {
      // ‡∏ö‡∏ô GitHub Pages: ‡πÑ‡∏°‡πà‡∏°‡∏µ live_detections ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á
      return;
    }
    // ‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    loadLiveStream();
    fetch("/api/live_detections")
      .then((res) => res.json())
      .then((data) => {
        if (data.error) {
          setStatus("‚ùå " + data.error, true);
          return;
        }
        drawDetections(data.detections, data.jack);
        updateScores(data.score_plain, data.score_patterned);
        setStatus("‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡∏™‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö");
      })
      .catch(() => {
        setStatus("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏î‡πÑ‡∏î‡πâ");
      });
  }

  // ---------- Save match ----------
  function saveMatchToServer({ matchName, matchType, scoreA, scoreB }) {
    if (isStatic) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå -> ‡πÄ‡∏Å‡πá‡∏ö localStorage ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πÇ‡∏°
      const key = 'spj:matches';
      const list = JSON.parse(localStorage.getItem(key) || '[]');
      list.push({ ts: Date.now(), matchName, matchType, scoreA, scoreB });
      localStorage.setItem(key, JSON.stringify(list));
      alert("üíæ (‡πÇ‡∏´‡∏°‡∏î Static) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏•‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß");
      setStatus("üíæ (Local) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      return;
    }

    fetch("/save_match", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        match_name: matchName,
        match_type: matchType,
        team_a_score: scoreA,
        team_b_score: scoreB,
      }),
    })
    .then((res) => res.json())
    .then((data) => {
      if (data.success) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
        setStatus("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏°‡∏ï‡∏ä‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        if (matchNameInput) matchNameInput.value = "";
        updateScores(0, 0);
      } else {
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: " + (data.error || ""));
        setStatus("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", true);
      }
    })
    .catch((err) => {
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
      setStatus("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", true);
      console.error(err);
    });
  }

  // ---------- Camera (getUserMedia) ----------
  async function listCameras() {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const cams = devices.filter(d => d.kind === 'videoinput');

    if (cameraSel) {
      cameraSel.innerHTML = '';
      cams.forEach((cam, i) => {
        const opt = document.createElement('option');
        opt.value = cam.deviceId;
        opt.textContent = cam.label || `Camera ${i+1}`;
        cameraSel.appendChild(opt);
      });

      // ‡πÄ‡∏î‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å label
      const back = cams.find(c => /back|rear|environment/i.test(c.label));
      if (back) {
        cameraSel.value = back.deviceId;
        currentDeviceId = back.deviceId;
        useBackCamera = true;
      } else if (cams[0]) {
        cameraSel.value = cams[0].deviceId;
        currentDeviceId = cams[0].deviceId;
      }
    }

    return cams;
  }

  async function startWithConstraints({ deviceId, facingMode } = {}) {
    stopStream();

    const constraints = {
      audio: false,
      video: {
        width:  { ideal: 1280 },
        height: { ideal: 720  },
        ...(deviceId ? { deviceId: { exact: deviceId } } : {}),
        ...(facingMode ? { facingMode } : {})
      }
    };

    stream = await navigator.mediaDevices.getUserMedia(constraints);

    if (liveVideo) {
      liveVideo.srcObject = stream;
      const track = stream.getVideoTracks()[0];
      const settings = track.getSettings?.() || {};
      const isFront = settings.facingMode === 'user' || (!useBackCamera && isMobile);
      liveVideo.style.transform = isFront ? 'scaleX(-1)' : 'none';
      liveVideo.onloadedmetadata = () => ensureCanvasFromVideo();
    }

    // ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ labels ‡πÇ‡∏ú‡∏•‡πà
    await listCameras();
    setStatus('‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }

  async function startCameraPreferred() {
    setStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‚Ä¶');
    try {
      const tryFacing = isMobile ? 'environment' : undefined;
      await startWithConstraints({ facingMode: tryFacing });
      useBackCamera = !!tryFacing;
    } catch (e1) {
      console.warn('facingMode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏• -> ‡∏•‡∏≠‡∏á deviceId', e1);
      await listCameras();
      if (!currentDeviceId) {
        setStatus('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ', true);
        return;
      }
      await startWithConstraints({ deviceId: currentDeviceId });
    }
  }

  async function toggleCamera() {
    useBackCamera = !useBackCamera;
    const targetFacing = useBackCamera ? 'environment' : 'user';
    try {
      await startWithConstraints({ facingMode: targetFacing });
    } catch (eFacing) {
      console.warn('‡∏™‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ facingMode ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> ‡∏•‡∏≠‡∏á deviceId', eFacing);
      if (cameraSel) {
        const opts = Array.from(cameraSel.options);
        const target = opts.find(o =>
          useBackCamera ? /back|rear|environment/i.test(o.textContent)
                        : /front|user/i.test(o.textContent)
        ) || opts[0];
        if (target) {
          currentDeviceId = target.value;
          await startWithConstraints({ deviceId: currentDeviceId });
        } else {
          setStatus('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£', true);
        }
      }
    }
  }

  async function setTorch(on) {
    if (!stream) return setStatus('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô', true);
    const track = stream.getVideoTracks()[0];
    const caps = track.getCapabilities?.();
    if (!caps || !caps.torch) {
      return setStatus('‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏â‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå', true);
    }
    try {
      await track.applyConstraints({ advanced: [{ torch: on }] });
      torchOn = on;
      setStatus(on ? 'üí° ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏â‡∏≤‡∏¢' : '‡πÑ‡∏ü‡∏â‡∏≤‡∏¢‡∏õ‡∏¥‡∏î');
    } catch (e) {
      console.error(e);
      setStatus('‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏â‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', true);
    }
  }

  // ---------- Events ----------
  if (uploadBtn) {
    uploadBtn.addEventListener("click", (e) => {
      e.preventDefault();
      uploadAndDetect();
    });
  }

  if (fileInput) {
    fileInput.addEventListener("change", (e) => {
      previewFiles(e.target.files);
    });
  }

  if (resetBtn) {
    resetBtn.addEventListener("click", () => {
      if (canvas && ctx) ctx.clearRect(0,0,canvas.width,canvas.height);
      if (filePreview) filePreview.innerHTML = "";
      if (fileInput) fileInput.value = "";
      if (matchNameInput) matchNameInput.value = "";
      updateScores(0,0);
      setStatus('');
    });
  }

  if (saveMatchBtn) {
    saveMatchBtn.addEventListener("click", () => {
      const matchName = (matchNameInput?.value || '').trim();
      const matchType = competitionTypeSelect?.value || '';
      const scoreA = parseInt(teamAScoreElem?.textContent || '0', 10) || 0;
      const scoreB = parseInt(teamBScoreElem?.textContent || '0', 10) || 0;
      if (!matchName) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");

      saveMatchToServer({ matchName, matchType, scoreA, scoreB });
    });
  }

  if (saveLiveBtn) {
    saveLiveBtn.addEventListener("click", () => {
      const matchName = (matchNameInput?.value || '').trim();
      const matchType = competitionTypeSelect?.value || '';
      const scoreA = parseInt(teamAScoreElem?.textContent || '0', 10) || 0;
      const scoreB = parseInt(teamBScoreElem?.textContent || '0', 10) || 0;

      if (!matchName) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏î");

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ liveVideo ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏•‡∏á‡πÅ‡∏Ñ‡∏ô‡∏ß‡∏≤‡∏™‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå/‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á infer)
      if (liveVideo && stream) {
        drawVideoFrameToCanvas();
      }
      saveMatchToServer({ matchName, matchType, scoreA, scoreB });
    });
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô HTML)
  if (startBtn) {
    startBtn.addEventListener('click', async () => {
      try { await startCameraPreferred(); } catch {}
    });
  }
  if (toggleBtn) {
    toggleBtn.addEventListener('click', async () => {
      try { await toggleCamera(); } catch {}
    });
  }
  if (cameraSel) {
    cameraSel.addEventListener('change', async () => {
      currentDeviceId = cameraSel.value;
      try { await startWithConstraints({ deviceId: currentDeviceId }); } catch {}
    });
  }
  if (torchBtn) {
    torchBtn.addEventListener('click', async () => {
      await setTorch(!torchOn);
    });
  }

  // ---------- Init ----------
  (async function init() {
    // ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏¥‡∏°: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏î + ‡πÇ‡∏û‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!isStatic && liveImage) {
      loadLiveStream();
      setInterval(refreshLiveStream, 1000);
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ UI ‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if (navigator.mediaDevices?.enumerateDevices && (startBtn || cameraSel)) {
      try { await navigator.mediaDevices.enumerateDevices(); } catch {}
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: labels ‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ permission ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    updateScores(
      parseInt(teamAScoreElem?.textContent || '0', 10) || 0,
      parseInt(teamBScoreElem?.textContent || '0', 10) || 0
    );

    if (isStatic && liveImage) {
      // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HTML ‡πÄ‡∏õ‡πá‡∏ô <video> + ‡∏õ‡∏∏‡πà‡∏°
      console.warn('‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô GitHub Pages: /video_feed ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï HTML ‡πÄ‡∏õ‡πá‡∏ô <video id="liveVideo"> ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á/‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á');
      setStatus('‡πÇ‡∏´‡∏°‡∏î Static: ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏î "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÅ‡∏ó‡∏ô /video_feed)');
    }
  })();

})();
